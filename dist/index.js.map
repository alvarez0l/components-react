{"version":3,"file":"index.js","sources":["../src/components/controls/ClearPinButton.tsx","../src/components/ConnectionState.tsx","../src/components/controls/StartAudio.tsx","../src/components/LiveKitRoom.tsx","../src/components/participant/AudioVisualizer.tsx","../src/components/ParticipantLoop.tsx","../src/components/RoomName.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { useClearPinButton } from '../../hooks';\r\n\r\n/** @public */\r\nexport interface ClearPinButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\n/**\r\n * The `ClearPinButton` is a basic html button with the added ability to signal\r\n * the `LayoutContext` that it should display the grid view again.\r\n * @remarks\r\n * This component works only inside a `LayoutContext`.\r\n *\r\n * @example\r\n * ```tsx\r\n * <LiveKitRoom>\r\n *   <ClearPinButton>Back to grid view</ClearPinButton>\r\n * </LiveKitRoom>\r\n * ```\r\n * @public\r\n */\r\nexport const ClearPinButton: (\r\n  props: ClearPinButtonProps & React.RefAttributes<HTMLButtonElement>,\r\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<HTMLButtonElement, ClearPinButtonProps>(\r\n  function ClearPinButton(props: ClearPinButtonProps, ref) {\r\n    const { buttonProps } = useClearPinButton(props);\r\n    return (\r\n      <button ref={ref} {...buttonProps}>\r\n        {props.children}\r\n      </button>\r\n    );\r\n  },\r\n);\r\n","import type { Room } from 'livekit-client';\r\nimport * as React from 'react';\r\nimport { useConnectionState } from '../hooks';\r\n\r\n/** @public */\r\nexport interface ConnectionStatusProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * The room from which the connection status should be displayed.\r\n   */\r\n  room?: Room;\r\n}\r\n\r\n/**\r\n * The `ConnectionState` component displays the connection status of the room as strings\r\n * (`\"connected\" | \"connecting\" | \"disconnected\" | \"reconnecting\"`).\r\n *\r\n * @example\r\n * ```tsx\r\n * <LiveKitRoom>\r\n *   <ConnectionState />\r\n * </LiveKitRoom>\r\n * ```\r\n * @public\r\n */\r\nexport const ConnectionState: (\r\n  props: ConnectionStatusProps & React.RefAttributes<HTMLDivElement>,\r\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<HTMLDivElement, ConnectionStatusProps>(\r\n  function ConnectionState({ room, ...props }: ConnectionStatusProps, ref) {\r\n    const connectionState = useConnectionState(room);\r\n    return (\r\n      <div ref={ref} {...props}>\r\n        {connectionState}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n","import * as React from 'react';\r\nimport { useRoomContext } from '../../context';\r\nimport { useStartAudio } from '../../hooks';\r\n\r\n/** @public */\r\nexport interface AllowAudioPlaybackProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  label: string;\r\n}\r\n\r\n/**\r\n * The `StartAudio` component is only visible when the browser blocks audio playback. This is due to some browser implemented autoplay policies.\r\n * To start audio playback, the user must perform a user-initiated event such as clicking this button.\r\n * As soon as audio playback starts, the button hides itself again.\r\n *\r\n * @example\r\n * ```tsx\r\n * <LiveKitRoom>\r\n *   <StartAudio label=\"Click to allow audio playback\" />\r\n * </LiveKitRoom>\r\n * ```\r\n *\r\n * @see Autoplay policy on MDN web docs: {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Best_practices#autoplay_policy}\r\n * @public\r\n */\r\nexport const StartAudio: (\r\n  props: AllowAudioPlaybackProps & React.RefAttributes<HTMLButtonElement>,\r\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<HTMLButtonElement, AllowAudioPlaybackProps>(\r\n  function StartAudio({ label = 'Allow Audio', ...props }: AllowAudioPlaybackProps, ref) {\r\n    const room = useRoomContext();\r\n    const { mergedProps } = useStartAudio({ room, props });\r\n\r\n    return (\r\n      <button ref={ref} {...mergedProps}>\r\n        {label}\r\n      </button>\r\n    );\r\n  },\r\n);\r\n","import type {\r\n  AudioCaptureOptions,\r\n  DisconnectReason,\r\n  RoomConnectOptions,\r\n  RoomOptions,\r\n  ScreenShareCaptureOptions,\r\n  VideoCaptureOptions,\r\n} from 'livekit-client';\r\nimport type { MediaDeviceFailure, Room } from 'livekit-client';\r\nimport * as React from 'react';\r\nimport { type FeatureFlags, LKFeatureContext, RoomContext } from '../context';\r\nimport { useLiveKitRoom } from '../hooks';\r\n\r\n/** @public */\r\nexport interface LiveKitRoomProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onError'> {\r\n  /**\r\n   * URL to the LiveKit server.\r\n   * For example: `wss://<domain>.livekit.cloud`\r\n   * To simplify the implementation, `undefined` is also accepted as an intermediate value, but only with a valid string url can the connection be established.\r\n   */\r\n  serverUrl: string | undefined;\r\n  /**\r\n   * A user specific access token for a client to authenticate to the room.\r\n   * This token is necessary to establish a connection to the room.\r\n   * To simplify the implementation, `undefined` is also accepted as an intermediate value, but only with a valid string token can the connection be established.\r\n   *\r\n   * @see https://docs.livekit.io/cloud/project-management/keys-and-tokens/#generating-access-tokens\r\n   */\r\n  token: string | undefined;\r\n  /**\r\n   * Publish audio immediately after connecting to your LiveKit room.\r\n   * @defaultValue `false`\r\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/AudioCaptureOptions.html\r\n   */\r\n  audio?: AudioCaptureOptions | boolean;\r\n  /**\r\n   * Publish video immediately after connecting to your LiveKit room.\r\n   * @defaultValue `false`\r\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/VideoCaptureOptions.html\r\n   */\r\n  video?: VideoCaptureOptions | boolean;\r\n  /**\r\n   * Publish screen share immediately after connecting to your LiveKit room.\r\n   * @defaultValue `false`\r\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/ScreenShareCaptureOptions.html\r\n   */\r\n  screen?: ScreenShareCaptureOptions | boolean;\r\n  /**\r\n   * If set to true a connection to LiveKit room is initiated.\r\n   * @defaultValue `true`\r\n   */\r\n  connect?: boolean;\r\n  /**\r\n   * Options for when creating a new room.\r\n   * When you pass your own room instance to this component, these options have no effect.\r\n   * Instead, set the options directly in the room instance.\r\n   *\r\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/RoomOptions.html\r\n   */\r\n  options?: RoomOptions;\r\n  /**\r\n   * Define options how to connect to the LiveKit server.\r\n   *\r\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/RoomConnectOptions.html\r\n   */\r\n  connectOptions?: RoomConnectOptions;\r\n  onConnected?: () => void;\r\n  onDisconnected?: (reason?: DisconnectReason) => void;\r\n  onError?: (error: Error) => void;\r\n  onMediaDeviceFailure?: (failure?: MediaDeviceFailure) => void;\r\n  onEncryptionError?: (error: Error) => void;\r\n  /**\r\n   * Optional room instance.\r\n   * By passing your own room instance you overwrite the `options` parameter,\r\n   * make sure to set the options directly on the room instance itself.\r\n   */\r\n  room?: Room;\r\n\r\n  simulateParticipants?: number | undefined;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  featureFlags?: FeatureFlags;\r\n}\r\n\r\n/**\r\n * The `LiveKitRoom` component provides the room context to all its child components.\r\n * It is generally the starting point of your LiveKit app and the root of the LiveKit component tree.\r\n * It provides the room state as a React context to all child components, so you don't have to pass it yourself.\r\n *\r\n * @example\r\n * ```tsx\r\n * <LiveKitRoom\r\n *  token='<livekit-token>'\r\n *  serverUrl='<url-to-livekit-server>'\r\n *  connect={true}\r\n * >\r\n *     ...\r\n * </LiveKitRoom>\r\n * ```\r\n * @public\r\n */\r\nexport const LiveKitRoom: (\r\n  props: React.PropsWithChildren<LiveKitRoomProps> & React.RefAttributes<HTMLDivElement>,\r\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<\r\n  HTMLDivElement,\r\n  React.PropsWithChildren<LiveKitRoomProps>\r\n>(function LiveKitRoom(props: React.PropsWithChildren<LiveKitRoomProps>, ref) {\r\n  const { room, htmlProps } = useLiveKitRoom(props);\r\n  return (\r\n    <div ref={ref} {...htmlProps}>\r\n      {room && (\r\n        <RoomContext.Provider value={room}>\r\n          <LKFeatureContext.Provider value={props.featureFlags}>\r\n            {props.children}\r\n          </LKFeatureContext.Provider>\r\n        </RoomContext.Provider>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n","import * as React from 'react';\r\nimport { type TrackReference } from '@livekit/components-core';\r\nimport { useEnsureTrackRef } from '../../context';\r\nimport { useMultibandTrackVolume } from '../../hooks';\r\n\r\n/**\r\n * @public\r\n * @deprecated Use BarVisualizer instead\r\n */\r\nexport interface AudioVisualizerProps extends React.HTMLAttributes<SVGElement> {\r\n  trackRef?: TrackReference;\r\n}\r\n\r\n/**\r\n * The AudioVisualizer component is used to visualize the audio volume of a given audio track.\r\n * @remarks\r\n * Requires a `TrackReferenceOrPlaceholder` to be provided either as a property or via the `TrackRefContext`.\r\n * @example\r\n * ```tsx\r\n * <AudioVisualizer />\r\n * ```\r\n * @public\r\n * @deprecated Use BarVisualizer instead\r\n */\r\nexport const AudioVisualizer: (\r\n  props: AudioVisualizerProps & React.RefAttributes<SVGSVGElement>,\r\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<SVGSVGElement, AudioVisualizerProps>(\r\n  function AudioVisualizer({ trackRef, ...props }: AudioVisualizerProps, ref) {\r\n    const svgWidth = 200;\r\n    const svgHeight = 90;\r\n    const barWidth = 6;\r\n    const barSpacing = 4;\r\n    const volMultiplier = 50;\r\n    const barCount = 7;\r\n    const trackReference = useEnsureTrackRef(trackRef);\r\n\r\n    const volumes = useMultibandTrackVolume(trackReference, { bands: 7, loPass: 300 });\r\n\r\n    return (\r\n      <svg\r\n        ref={ref}\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n        {...props}\r\n        className=\"lk-audio-visualizer\"\r\n      >\r\n        <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />\r\n        <g\r\n          style={{\r\n            transform: `translate(${(svgWidth - barCount * (barWidth + barSpacing)) / 2}px, 0)`,\r\n          }}\r\n        >\r\n          {volumes.map((vol, idx) => (\r\n            <rect\r\n              key={idx}\r\n              x={idx * (barWidth + barSpacing)}\r\n              y={svgHeight / 2 - (vol * volMultiplier) / 2}\r\n              width={barWidth}\r\n              height={vol * volMultiplier}\r\n            ></rect>\r\n          ))}\r\n        </g>\r\n      </svg>\r\n    );\r\n  },\r\n);\r\n","import type { Participant } from 'livekit-client';\r\nimport * as React from 'react';\r\nimport { ParticipantContext } from '../context';\r\nimport { cloneSingleChild } from '../utils';\r\n\r\n/** @public */\r\nexport interface ParticipantLoopProps {\r\n  /** The participants to loop over. Use `useParticipants()` hook to get participants. */\r\n  participants: Participant[];\r\n  /** The template component to be used in the loop. */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * The `ParticipantLoop` component loops over an array of participants to create a context for every participant.\r\n * This component takes exactly one child component as a template.\r\n * By providing your own template as a child you have full control over the look and feel of your participant representations.\r\n *\r\n * @remarks\r\n * If you want to loop over individual tracks instead of participants, you can use the `TrackLoop` component.\r\n *\r\n * @example\r\n * ```tsx\r\n * const participants = useParticipants();\r\n * <ParticipantLoop participants={participants}>\r\n *   <ParticipantName />\r\n * </ParticipantLoop>\r\n * ```\r\n * @public\r\n */\r\nexport function ParticipantLoop({ participants, ...props }: ParticipantLoopProps) {\r\n  return (\r\n    <>\r\n      {participants.map((participant) => (\r\n        <ParticipantContext.Provider value={participant} key={participant.identity}>\r\n          {cloneSingleChild(props.children)}\r\n        </ParticipantContext.Provider>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useRoomInfo } from '../hooks';\r\n\r\n/** @public */\r\nexport interface RoomNameProps extends React.HTMLAttributes<HTMLSpanElement> {\r\n  childrenPosition?: 'before' | 'after';\r\n}\r\n\r\n/**\r\n * The `RoomName` component renders the name of the connected LiveKit room inside a span tag.\r\n *\r\n * @example\r\n * ```tsx\r\n * <LiveKitRoom>\r\n *   <RoomName />\r\n * </LiveKitRoom>\r\n * ```\r\n * @public\r\n *\r\n * @param props - RoomNameProps\r\n */\r\nexport const RoomName: React.FC<RoomNameProps & React.RefAttributes<HTMLSpanElement>> =\r\n  /* @__PURE__ */ React.forwardRef<HTMLSpanElement, RoomNameProps>(function RoomName(\r\n    { childrenPosition = 'before', children, ...htmlAttributes }: RoomNameProps,\r\n    ref,\r\n  ) {\r\n    const { name } = useRoomInfo();\r\n\r\n    return (\r\n      <span ref={ref} {...htmlAttributes}>\r\n        {childrenPosition === 'before' && children}\r\n        {name}\r\n        {childrenPosition === 'after' && children}\r\n      </span>\r\n    );\r\n  });\r\n"],"names":["ClearPinButton","React","props","ref","buttonProps","useClearPinButton","ConnectionState","room","connectionState","useConnectionState","StartAudio","label","useRoomContext","mergedProps","useStartAudio","LiveKitRoom","htmlProps","useLiveKitRoom","RoomContext","LKFeatureContext","AudioVisualizer","trackRef","trackReference","useEnsureTrackRef","volumes","useMultibandTrackVolume","vol","idx","ParticipantLoop","participants","participant","ParticipantContext","cloneSingleChild","RoomName","childrenPosition","children","htmlAttributes","name","useRoomInfo"],"mappings":"2gBAoBaA,EAEgCC,EAAA,WAC3C,SAAwBC,EAA4BC,EAAK,CACvD,KAAM,CAAE,YAAAC,CAAA,EAAgBC,EAAA,kBAAkBH,CAAK,EAC/C,uBACG,SAAO,CAAA,IAAAC,EAAW,GAAGC,CAAA,EACnBF,EAAM,QACT,CAAA,CAGN,ECPaI,EAEgCL,EAAA,WAC3C,SAAyB,CAAE,KAAAM,EAAM,GAAGL,CAAA,EAAgCC,EAAK,CACjE,MAAAK,EAAkBC,qBAAmBF,CAAI,EAC/C,OACGN,EAAA,cAAA,MAAA,CAAI,IAAAE,EAAW,GAAGD,GAChBM,CACH,CAAA,CAGN,ECXaE,EAEgCT,EAAA,WAC3C,SAAoB,CAAE,MAAAU,EAAQ,cAAe,GAAGT,GAAkCC,EAAK,CACrF,MAAMI,EAAOK,EAAAA,eAAe,EACtB,CAAE,YAAAC,CAAY,EAAIC,EAAAA,cAAc,CAAE,KAAAP,EAAM,MAAAL,EAAO,EAErD,OACGD,EAAA,cAAA,SAAA,CAAO,IAAAE,EAAW,GAAGU,GACnBF,CACH,CAAA,CAGN,ECkEaI,EAEgCd,EAAA,WAG3C,SAAqBC,EAAkDC,EAAK,CAC5E,KAAM,CAAE,KAAAI,EAAM,UAAAS,GAAcC,EAAAA,eAAef,CAAK,EAE9C,OAAAD,EAAA,cAAC,OAAI,IAAAE,EAAW,GAAGa,GAChBT,GACCN,EAAA,cAACiB,EAAAA,YAAY,SAAZ,CAAqB,MAAOX,GAC1BN,EAAA,cAAAkB,EAAAA,iBAAiB,SAAjB,CAA0B,MAAOjB,EAAM,YACrC,EAAAA,EAAM,QACT,CACF,CAEJ,CAEJ,CAAC,ECjGYkB,EAEgCnB,EAAA,WAC3C,SAAyB,CAAE,SAAAoB,EAAU,GAAGnB,CAAA,EAA+BC,EAAK,CAOpE,MAAAmB,EAAiBC,oBAAkBF,CAAQ,EAE3CG,EAAUC,0BAAwBH,EAAgB,CAAE,MAAO,EAAG,OAAQ,IAAK,EAG/E,OAAArB,EAAA,cAAC,MAAA,CACC,IAAAE,EACA,MAAM,OACN,OAAO,OACP,QAAS,aACR,GAAGD,EACJ,UAAU,qBAAA,EAEVD,EAAA,cAAC,QAAK,EAAE,IAAI,EAAE,IAAI,MAAM,OAAO,OAAO,MAAO,CAAA,EAC7CA,EAAA,cAAC,IAAA,CACC,MAAO,CACL,UAAW,cAAc,IAAW,EAAY,IAA0B,CAAC,QAAA,CAC7E,EAECuB,EAAQ,IAAI,CAACE,EAAKC,IACjB1B,EAAA,cAAC,OAAA,CACC,IAAK0B,EACL,EAAGA,EAAO,GACV,EAAG,GAAY,EAAKD,EAAM,GAAiB,EAC3C,MAAO,EACP,OAAQA,EAAM,EAAA,CAEjB,CAAA,CAAA,CAEL,CAAA,CAGN,ECpCO,SAASE,EAAgB,CAAE,aAAAC,EAAc,GAAG3B,GAA+B,CAChF,uCAEK2B,EAAa,IAAKC,GACjB7B,EAAA,cAAC8B,EAAAA,mBAAmB,SAAnB,CAA4B,MAAOD,EAAa,IAAKA,EAAY,QAC/D,EAAAE,mBAAiB9B,EAAM,QAAQ,CAClC,CACD,CACH,CAEJ,CCnBO,MAAM+B,EACKhC,EAAM,WAA2C,SAC/D,CAAE,iBAAAiC,EAAmB,SAAU,SAAAC,EAAU,GAAGC,CAAe,EAC3DjC,EACA,CACM,KAAA,CAAE,KAAAkC,CAAK,EAAIC,cAAY,EAG3B,OAAArC,EAAA,cAAC,OAAK,CAAA,IAAAE,EAAW,GAAGiC,CAAA,EACjBF,IAAqB,UAAYC,EACjCE,EACAH,IAAqB,SAAWC,CACnC,CAEJ,CAAC"}