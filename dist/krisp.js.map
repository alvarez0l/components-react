{"version":3,"file":"krisp.js","sources":["../src/hooks/cloud/krisp/useKrispNoiseFilter.ts"],"sourcesContent":["import * as React from 'react';\r\nimport { LocalAudioTrack } from 'livekit-client';\r\nimport { log } from '@livekit/components-core';\r\nimport type { KrispNoiseFilterProcessor, NoiseFilterOptions } from '@livekit/krisp-noise-filter';\r\nimport type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\r\nimport { useLocalParticipant } from '../../..';\r\n\r\n/**\r\n * @beta\r\n */\r\nexport interface useKrispNoiseFilterOptions {\r\n  /**\r\n   * The track reference to use for the noise filter (defaults: local microphone track)\r\n   */\r\n  trackRef?: TrackReferenceOrPlaceholder;\r\n  /**\r\n   * @internal\r\n   */\r\n  filterOptions?: NoiseFilterOptions;\r\n}\r\n\r\n/**\r\n * Enable the Krisp enhanced noise cancellation feature for local audio tracks.\r\n *\r\n * Defaults to the localParticipant's microphone track publication, but you can override this behavior by passing in a different track reference.\r\n *\r\n * @package \\@livekit/components-react/krisp\r\n * @remarks This filter requires that you install the `@livekit/krisp-noise-filter` package and is supported only on {@link https://cloud.livekit.io | LiveKit Cloud}.\r\n * @beta\r\n * @example\r\n * ```tsx\r\n * const krisp = useKrispNoiseFilter();\r\n * return <input\r\n *   type=\"checkbox\"\r\n *   onChange={(ev) => krisp.setNoiseFilterEnabled(ev.target.checked)}\r\n *   checked={krisp.isNoiseFilterEnabled}\r\n *   disabled={krisp.isNoiseFilterPending}\r\n * />\r\n * ```\r\n * @returns Use `setIsNoiseFilterEnabled` to enable/disable the noise filter.\r\n */\r\nexport function useKrispNoiseFilter(options: useKrispNoiseFilterOptions = {}) {\r\n  const [shouldEnable, setShouldEnable] = React.useState(false);\r\n  const [isNoiseFilterPending, setIsNoiseFilterPending] = React.useState(false);\r\n  const [isNoiseFilterEnabled, setIsNoiseFilterEnabled] = React.useState(false);\r\n  let micPublication = useLocalParticipant().microphoneTrack;\r\n  const [krispProcessor, setKrispProcessor] = React.useState<\r\n    KrispNoiseFilterProcessor | undefined\r\n  >();\r\n  if (options.trackRef) {\r\n    micPublication = options.trackRef.publication;\r\n  }\r\n\r\n  const setNoiseFilterEnabled = React.useCallback(async (enable: boolean) => {\r\n    if (enable) {\r\n      const { KrispNoiseFilter, isKrispNoiseFilterSupported } = await import(\r\n        '@livekit/krisp-noise-filter'\r\n      );\r\n\r\n      if (!isKrispNoiseFilterSupported()) {\r\n        log.warn('LiveKit-Krisp noise filter is not supported in this browser');\r\n        return;\r\n      }\r\n      if (!krispProcessor) {\r\n        setKrispProcessor(KrispNoiseFilter(options.filterOptions));\r\n      }\r\n    }\r\n    setShouldEnable((prev) => {\r\n      if (prev !== enable) {\r\n        setIsNoiseFilterPending(true);\r\n      }\r\n      return enable;\r\n    });\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (micPublication && micPublication.track instanceof LocalAudioTrack && krispProcessor) {\r\n      const currentProcessor = micPublication.track.getProcessor();\r\n      if (currentProcessor && currentProcessor.name === 'livekit-noise-filter') {\r\n        setIsNoiseFilterPending(true);\r\n        (currentProcessor as KrispNoiseFilterProcessor).setEnabled(shouldEnable).finally(() => {\r\n          setIsNoiseFilterPending(false);\r\n          setIsNoiseFilterEnabled(shouldEnable);\r\n        });\r\n      } else if (!currentProcessor && shouldEnable) {\r\n        setIsNoiseFilterPending(true);\r\n        micPublication?.track\r\n          ?.setProcessor(krispProcessor)\r\n          .then(() => krispProcessor.setEnabled(shouldEnable))\r\n          .then(() => {\r\n            setIsNoiseFilterEnabled(true);\r\n          })\r\n          .catch((e: any) => {\r\n            setIsNoiseFilterEnabled(false);\r\n            log.error('Krisp hook: error enabling filter', e);\r\n          })\r\n          .finally(() => {\r\n            setIsNoiseFilterPending(false);\r\n          });\r\n      }\r\n    }\r\n  }, [shouldEnable, micPublication, krispProcessor]);\r\n\r\n  return {\r\n    setNoiseFilterEnabled,\r\n    isNoiseFilterEnabled,\r\n    isNoiseFilterPending,\r\n    processor: krispProcessor,\r\n  };\r\n}\r\n"],"names":["useKrispNoiseFilter","options","shouldEnable","setShouldEnable","React","isNoiseFilterPending","setIsNoiseFilterPending","isNoiseFilterEnabled","setIsNoiseFilterEnabled","micPublication","useLocalParticipant","krispProcessor","setKrispProcessor","setNoiseFilterEnabled","enable","KrispNoiseFilter","isKrispNoiseFilterSupported","log","prev","LocalAudioTrack","currentProcessor","_a","e"],"mappings":"44BAyCgB,SAAAA,EAAoBC,EAAsC,GAAI,CAC5E,KAAM,CAACC,EAAcC,CAAe,EAAIC,EAAM,SAAS,EAAK,EACtD,CAACC,EAAsBC,CAAuB,EAAIF,EAAM,SAAS,EAAK,EACtE,CAACG,EAAsBC,CAAuB,EAAIJ,EAAM,SAAS,EAAK,EACxE,IAAAK,EAAiBC,wBAAsB,gBAC3C,KAAM,CAACC,EAAgBC,CAAiB,EAAIR,EAAM,SAEhD,EACEH,EAAQ,WACVQ,EAAiBR,EAAQ,SAAS,aAGpC,MAAMY,EAAwBT,EAAM,YAAY,MAAOU,GAAoB,CACzE,GAAIA,EAAQ,CACV,KAAM,CAAE,iBAAAC,EAAkB,4BAAAC,GAAgC,KAAM,QAC9D,6BACF,EAEI,GAAA,CAACA,IAA+B,CAClCC,EAAA,IAAI,KAAK,6DAA6D,EACtE,MAAA,CAEGN,GACeC,EAAAG,EAAiBd,EAAQ,aAAa,CAAC,CAC3D,CAEFE,EAAiBe,IACXA,IAASJ,GACXR,EAAwB,EAAI,EAEvBQ,EACR,CACH,EAAG,EAAE,EAELV,OAAAA,EAAM,UAAU,IAAM,OACpB,GAAIK,GAAkBA,EAAe,iBAAiBU,EAAAA,iBAAmBR,EAAgB,CACjF,MAAAS,EAAmBX,EAAe,MAAM,aAAa,EACvDW,GAAoBA,EAAiB,OAAS,wBAChDd,EAAwB,EAAI,EAC3Bc,EAA+C,WAAWlB,CAAY,EAAE,QAAQ,IAAM,CACrFI,EAAwB,EAAK,EAC7BE,EAAwBN,CAAY,CAAA,CACrC,GACQ,CAACkB,GAAoBlB,IAC9BI,EAAwB,EAAI,GAC5Be,EAAAZ,GAAA,YAAAA,EAAgB,QAAhB,MAAAY,EACI,aAAaV,GACd,KAAK,IAAMA,EAAe,WAAWT,CAAY,GACjD,KAAK,IAAM,CACVM,EAAwB,EAAI,CAAA,GAE7B,MAAOc,GAAW,CACjBd,EAAwB,EAAK,EACzBS,MAAA,MAAM,oCAAqCK,CAAC,CAAA,GAEjD,QAAQ,IAAM,CACbhB,EAAwB,EAAK,CAAA,GAEnC,CAED,EAAA,CAACJ,EAAcO,EAAgBE,CAAc,CAAC,EAE1C,CACL,sBAAAE,EACA,qBAAAN,EACA,qBAAAF,EACA,UAAWM,CACb,CACF"}